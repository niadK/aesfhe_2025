### for comparison! ###
import numpy as np

SBox = np.array([
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16],
], dtype = np.uint8)

MixMatrix = np.array([
    [2, 3, 1, 1],
    [1, 2, 3, 1],
    [1, 1, 2, 3],
    [3, 1, 1, 2]
], dtype = np.uint8)

RCon = np.array([
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1B, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
], dtype = np.uint8)

def addRoundKey(state, w):
    w = np.array(w)
    return state ^ w

def subBytes(state):
    return SBox[state >> 4, state & 0x0F]

def shiftRows(state):
    return np.array([
        state[0],
        np.roll(state[1], -1),
        np.roll(state[2], -2),
        np.roll(state[3], -3)
    ], dtype = np.uint8)

def xTime(b):
    return ((b << 1) ^ 0x1B) & 0xFF if (b & 0x80) else (b << 1) & 0xFF

def GFmul(b, n):
    if n == 1:
        return b
    elif n == 2:
        return xTime(b)
    elif n == 3:
        return xTime(b) ^ b
    else:
        raise ValueError("GFmul only supports 1, 2, 3")

def GFmul_xT(a, b):
    # example: a * b = a * (2⁴ + 2 + 1) = xTime(xTime(xTime(xTime(a)))) ^ xTime(a) ^ a

    res = 0
    curr = a 

    for i in range(8):
        if b & (1 << i): # b_i == 1 (nonzero val is true)
            res ^= curr
        curr = xTime(curr)

    return res

def GFmul_without_xT(a, b):
    # without xTime

    res = 0

    for _ in range(8):
        if b & 1: # LSB == 1
            res ^= a

        h = a & 0x80 # MSB

        a = (a << 1) & 0xFF
        
        if h:
            a ^= 0x1B

        b >>= 1
    return res

def mixSingleColumn(col):
    res = np.zeros(4, dtype = np.uint8)
    for i in range(4):
        for j in range(4):
            res[i] ^= GFmul(col[j], MixMatrix[i, j])
    return res

def mixColumns(state):
    res = np.zeros((4, 4), dtype = np.uint8)
    for c in range(4):
        res[:, c] = mixSingleColumn(state[:, c])
    return res

def rotWord(word):
    return np.roll(word, -1)

def subWord(word):
    return np.array([SBox[w >> 4, w & 0x0F] for w in word], dtype = np.uint8)

def keyExpansion(key):
    # AES-128
    Nk = 4
    Nb = 4
    Nr = 10

    key = np.array(key, dtype = np.uint8)
    w = np.zeros((4*(Nr+1), 4), dtype = np.uint8)

    for i in range(Nk):
        w[i] = key[4*i : 4*i+4]
    
    for i in range(Nk, 4*(Nr+1)):
        tmp = w[i-1].copy()
        if i % Nk == 0:
            tmp = subWord(rotWord(tmp)) ^ RCon[(i//Nk)-1]
        elif Nk > 6 and i % Nk == 4:
            tmp = subWord(tmp)
        w[i] = w[i-Nk] ^ tmp
        
    return w

def testprint(txt, state, show = False):
    if show:
        print("\n", txt)
        for r in state:
            print(' '.join(f"{s:02X}" for s in r))

def Cipher(input, Nr, w, show):
    ## input : array of 16 bytes
    ## Nr : number of rounds (AES-128: 10, AES-192: 12, AES-256: 14)
    ## w : result of key expansion, i.e. 4 * (Nr + 1) words round keys

    state = np.array(input, dtype = np.uint8).reshape(4, 4).T
    testprint("<input>", state, show)
    
    state = addRoundKey(state, w[0:4])
    testprint(f"round 0:", state, show)

    for round in range(1, Nr):
        state = subBytes(state)
        testprint(f"SB:", state, show)
        state = shiftRows(state)
        testprint(f"SR:", state, show)
        state = mixColumns(state)
        testprint(f"MC:", state, show)
        state = addRoundKey(state, w[4*round:4*round+4])
        testprint(f"round {round}:", state, show)
    
    state = subBytes(state)
    state = shiftRows(state)
    state = addRoundKey(state, w[4*Nr:4*Nr+4])
    testprint(f"round {Nr}:", state, show)
    
    return state

def encTest(pt: list[int], key: list[int], show = False, nr: int = 10):
    if len(pt) != 16 or len(key) != 16:
        raise ValueError("Plaintext and key must be 16 bytes each")

    print("\n[+] Plaintext:")
    print(' '.join(f"{b:02X}" for b in pt))

    round_keys = keyExpansion(key)
    res = Cipher(pt, nr, round_keys, show)

    testprint("<output>", res, show)

    print("\n[+] Ciphertext:")
    ct = res.T.flatten()
    print(' '.join(f"{b:02X}" for b in ct))

    return ct

# encryption test
# pt = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10]
# key = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10]
# encTest(pt, key)

InvSBOX = np.array([
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
], dtype=np.uint8)

InvMixMatrix = np.array([
    [0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e]
], dtype = np.uint8)

def invSubBytes(state):
    return InvSBOX[state >> 4, state & 0x0F]

def invShiftRows(state):
    return np.array([
        state[0],
        np.roll(state[1], 1),
        np.roll(state[2], 2),
        np.roll(state[3], 3)
    ], dtype = np.uint8)

def invMixSingleColumn(col):
    res = np.zeros(4, dtype=np.uint8)
    for i in range(4):
        for j in range(4):
            res[i] ^= GFmul_xT(col[j], InvMixMatrix[i, j]) # or can use "GFmul_without_xT"
    return res

def invMixColumns(state):
    res = np.zeros((4, 4), dtype=np.uint8)
    for c in range(4):
        res[:, c] = invMixSingleColumn(state[:, c])
    return res

def invCipher(input, Nr, w, show):
    ## input : array of 16 bytes (but ciphertext this time)
    ## Nr : number of rounds
    ## w : result of key expansion

    state = np.array(input, dtype = np.uint8).reshape(4, 4).T
    testprint("<input>", state, show)
    
    state = addRoundKey(state, w[4*Nr:4*Nr+4])
    testprint(f"INV round {Nr}:", state, show)

    for round in range(Nr - 1, 0, -1):
        state = invShiftRows(state)
        state = invSubBytes(state)
        state = addRoundKey(state, w[4*round:4*round+4])
        state = invMixColumns(state)
        testprint(f"INV round {round}:", state, show)
    
    state = invShiftRows(state)
    state = invSubBytes(state)
    state = addRoundKey(state, w[0:4])
    testprint(f"INV round 0:", state, show)

    return state

def eqInvChiper(input, Nr, dw):
    # same order as Cipher (just replace of inv-)

    ## input : array of 16 bytes
    ## Nr : number of rounds
    ## dw : result of *modified key schdule

    state = np.array(input, dtype = np.uint8).reshape(4, 4).T
    testprint("<input>", state)
    
    state = addRoundKey(state, dw[4*Nr:4*Nr+4])
    testprint(f"EQINV round {Nr}:", state)

    for round in range(Nr - 1, 0, -1):
        state = invSubBytes(state)
        state = invShiftRows(state)
        state = invMixColumns(state)
        state = addRoundKey(state, dw[4*round:4*round+4])
        testprint(f"EQINV round {round}:", state)
    
    state = invSubBytes(state)
    state = invShiftRows(state)
    state = addRoundKey(state, dw[0:4])
    testprint(f"EQINV round 0:", state)
    
    return state

def keyExpansionEIC(key):
    # AES-128
    Nk = 4
    Nb = 4
    Nr = 10

    key = np.array(key, dtype = np.uint8)
    dw = np.zeros((4*(Nr+1), 4), dtype = np.uint8)
    w = np.zeros_like(dw)

    for i in range(Nk):
        w[i] = key[4*i:4*i+4]
        dw[i] = w[i]
    
    for i in range(Nk, 4*(Nr+1)):
        tmp = w[i-1].copy()
        if i % Nk == 0:
            tmp = subWord(rotWord(tmp)) ^ RCon[(i//Nk)-1]
        elif Nk > 6 and i % Nk == 4:
            tmp = subWord(tmp)
        w[i] = w[i-Nk] ^ tmp
        dw[i] = w[i]
    
    for round in range(1, Nr):
        i = 4 * round
        dw[i:i+4] = invMixColumns(dw[i:i+4].T).T
        
    return dw

def decTest(ct: list[int], key: list[int], show = False, nr: int = 10):
    if len(ct) != 16 or len(key) != 16:
        raise ValueError("Ciphertext and key must be 16 bytes each")

    print("\n[+] Ciphertext:")
    print(' '.join(f"{b:02X}" for b in ct))

    round_keys = keyExpansion(key)
    res = invCipher(ct, nr, round_keys, show)  # AES-128

    testprint("<output>", res)

    print("\n[+] Decrypted Plaintext:")
    pt = res.T.flatten()
    print(' '.join(f"{b:02X}" for b in pt))

    return pt

# decryption test
# ct = [0x34, 0xC3, 0x3B, 0x7F, 0x14, 0xFD, 0x53, 0xDC, 0xEA, 0x25, 0xE0, 0x1A, 0x02, 0xE1, 0x67, 0x27]
# key = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10]
# decTest(ct, key)
